import gym
import plane_env
import numpy as np
import time



if __name__=="__main__":
    env = gym.make("PlaneEnv-v3")
    s0 = env.reset_z()
    env.render()
    time.sleep(1)
    J1 = []
    J2 = []
    J1_sum = 0
    J2_sum = 0
    for step in range(0, 19):
        x1_0, x3_0, x2_0, x4_0 = s0
        x1_0 = x1_0 / 100
        x3_0 = x3_0 / 100
        x2_0 = x2_0 / 100
        x4_0 = x4_0 / 100

        print("x1_0: ", x1_0)
        print("x3_0: ", x3_0)

        '''
        
        v0 = lam1*pow((x1_0 - 3),2) + lam2*pow((x3_0 + x1_0*u2_0 - 1),2);
        '''
        # u1_0 = -(2*(1875*x1_0 + 1875*x2_0 + 3125*x3_0 + 3125*x4_0 + 25*pow(x1_0,2)*pow(x2_0,2) - 2*pow(x1_0,4)*pow(x2_0,2) - 75*pow(x1_0,2)*pow(x3_0,2) + 125*x1_0*x2_0 + 1875*x1_0*x3_0 - 300*pow(x1_0,2)*x2_0 + 50*pow(x1_0,3)*x2_0 + 3*pow(x1_0,4)*x2_0 - 3*pow(x1_0,5)*x2_0 + 150*pow(x1_0,2)*x3_0 - 15*pow(x1_0,3)*x3_0 + 25*pow(x1_0,4)*x3_0 + 250*pow(x1_0,2)*x4_0 + 5*pow(x1_0,4)*x4_0 + 150*pow(x1_0,2) - 210*pow(x1_0,3) + 25*pow(x1_0,4) + 3*pow(x1_0,5) - pow(x1_0,6) + 25*pow(x1_0,3)*x2_0*x3_0 - 125*x1_0*x2_0*x3_0 - 14375))/(5*pow((pow(x1_0,2) + 25),2))

        # lam1 = 1, lam2 = 1
        # u1_0 = (2*(3900*x1_0 + 120*x2_0 - 250*x3_0 - 25*x4_0 + 16*pow(x1_0,2)*pow(x2_0,2) + 160*pow(x1_0,4)*pow(x2_0,2) + 2400*pow(x1_0,2)*pow(x3_0,2) + 80*x1_0*x2_0 - 4200*x1_0*x3_0 + 1320*pow(x1_0,2)*x2_0 + 1400*pow(x1_0,3)*x2_0 - 2400*pow(x1_0,4)*x2_0 + 2400*pow(x1_0,5)*x2_0 - 6600*pow(x1_0,2)*x3_0 + 12000*pow(x1_0,3)*x3_0 - 12800*pow(x1_0,4)*x3_0 - 200*pow(x1_0,2)*x4_0 - 400*pow(x1_0,4)*x4_0 - 13800*pow(x1_0,2) - 4800*pow(x1_0,3) + 12400*pow(x1_0,4) - 24000*pow(x1_0,5) + 8000*pow(x1_0,6) - 1280*pow(x1_0,3)*x2_0*x3_0 - 80*x1_0*x2_0*x3_0 + 1150))/(25*pow((4*pow(x1_0,2) + 1),2))

        # lam1 = 1.5 lam2 = 1
        # u1_0 = (2*(22500*x1_0 + 1080*x2_0 - 2250*x3_0 - 225*x4_0 + 96*pow(x1_0,2)*pow(x2_0,2) + 640*pow(x1_0,4)*pow(x2_0,2) + 9600*pow(x1_0,2)*pow(x3_0,2) + 480*x1_0*x2_0 - 25200*x1_0*x3_0 + 7920*pow(x1_0,2)*x2_0 + 5840*pow(x1_0,3)*x2_0 - 9600*pow(x1_0,4)*x2_0 + 9600*pow(x1_0,5)*x2_0 - 30000*pow(x1_0,2)*x3_0 + 48000*pow(x1_0,3)*x3_0 - 51200*pow(x1_0,4)*x3_0 - 1200*pow(x1_0,2)*x4_0 - 1600*pow(x1_0,4)*x4_0 - 87600*pow(x1_0,2) - 4800*pow(x1_0,3) + 48800*pow(x1_0,4) - 96000*pow(x1_0,5) + 32000*pow(x1_0,6) - 5120*pow(x1_0,3)*x2_0*x3_0 - 480*x1_0*x2_0*x3_0 + 10350))/(25*pow((8*pow(x1_0,2) + 3),2))
        # lam1 = 2, lam2 = 1
        # u1_0 = (2*(1800*x1_0 + 120*x2_0 - 250*x3_0 - 25*x4_0 + 8*pow(x1_0,2)*pow(x2_0,2) + 40*pow(x1_0,4)*pow(x2_0,2) + 600*pow(x1_0,2)*pow(x3_0,2) + 40*x1_0*x2_0 - 2100*x1_0*x3_0 + 660*pow(x1_0,2)*x2_0 + 380*pow(x1_0,3)*x2_0 - 600*pow(x1_0,4)*x2_0 + 600*pow(x1_0,5)*x2_0 - 2100*pow(x1_0,2)*x3_0 + 3000*pow(x1_0,3)*x3_0 - 3200*pow(x1_0,4)*x3_0 - 100*pow(x1_0,2)*x4_0 - 100*pow(x1_0,4)*x4_0 - 7500*pow(x1_0,2) + 600*pow(x1_0,3) + 3000*pow(x1_0,4) - 6000*pow(x1_0,5) + 2000*pow(x1_0,6) - 320*pow(x1_0,3)*x2_0*x3_0 - 40*x1_0*x2_0*x3_0 + 1150))/(25*pow((2*pow(x1_0,2) + 1),2))

        # lam1 = 5 lam2 = 0.5
        # u1_0 = (2*(600*x1_0 + 600*x2_0 - 1250*x3_0 - 125*x4_0 + 8*pow(x1_0,2)*pow(x2_0,2) + 8*pow(x1_0,4)*pow(x2_0,2) + 120*pow(x1_0,2)*pow(x3_0,2) + 40*x1_0*x2_0 - 2100*x1_0*x3_0 + 660*pow(x1_0,2)*x2_0 + 124*pow(x1_0,3)*x2_0 - 120*pow(x1_0,4)*x2_0 + 120*pow(x1_0,5)*x2_0 - 1140*pow(x1_0,2)*x3_0 + 600*pow(x1_0,3)*x3_0 - 640*pow(x1_0,4)*x3_0 - 100*pow(x1_0,2)*x4_0 - 20*pow(x1_0,4)*x4_0 - 7980*pow(x1_0,2) + 3000*pow(x1_0,3) + 440*pow(x1_0,4) - 1200*pow(x1_0,5) + 400*pow(x1_0,6) - 64*pow(x1_0,3)*x2_0*x3_0 - 40*x1_0*x2_0*x3_0 + 5750))/(5*pow((2*pow(x1_0,2) + 5),2))

        # lam1 = 0.5, lam2 = 5
        # u1_0 = (2*(8340*x1_0 + 24*x2_0 - 50*x3_0 - 5*x4_0 + 32*pow(x1_0,2)*pow(x2_0,2) + 3200*pow(x1_0,4)*pow(x2_0,2) + 48000*pow(x1_0,2)*pow(x3_0,2) + 160*x1_0*x2_0 - 8400*x1_0*x3_0 + 2640*pow(x1_0,2)*x2_0 + 25840*pow(x1_0,3)*x2_0 - 48000*pow(x1_0,4)*x2_0 + 48000*pow(x1_0,5)*x2_0 - 99600*pow(x1_0,2)*x3_0 + 240000*pow(x1_0,3)*x3_0 - 256000*pow(x1_0,4)*x3_0 - 400*pow(x1_0,2)*x4_0 - 8000*pow(x1_0,4)*x4_0 + 15600*pow(x1_0,2) - 225600*pow(x1_0,3) + 255200*pow(x1_0,4) - 480000*pow(x1_0,5) + 160000*pow(x1_0,6) - 25600*pow(x1_0,3)*x2_0*x3_0 - 160*x1_0*x2_0*x3_0 + 230))/(5*pow((40*pow(x1_0,2) + 1),2))

        # lam1 = 0.1, lam2 = 10
        u1_0 = (2*(83940*x1_0 + 24*x2_0 - 50*x3_0 - 5*x4_0 + 320*pow(x1_0,2)*pow(x2_0,2) + 320000*pow(x1_0,4)*pow(x2_0,2) + 4800000*pow(x1_0,2)*pow(x3_0,2) + 1600*x1_0*x2_0 - 84000*x1_0*x3_0 + 26400*pow(x1_0,2)*x2_0 + 2562400*pow(x1_0,3)*x2_0 - 4800000*pow(x1_0,4)*x2_0 + 4800000*pow(x1_0,5)*x2_0 - 9636000*pow(x1_0,2)*x3_0 + 24000000*pow(x1_0,3)*x3_0 - 25600000*pow(x1_0,4)*x3_0 - 4000*pow(x1_0,2)*x4_0 - 800000*pow(x1_0,4)*x4_0 + 4476000*pow(x1_0,2) - 23856000*pow(x1_0,3) + 25592000*pow(x1_0,4) - 48000000*pow(x1_0,5) + 16000000*pow(x1_0,6) - 2560000*pow(x1_0,3)*x2_0*x3_0 - 1600*x1_0*x2_0*x3_0 + 230))/(5*pow((400*pow(x1_0,2) + 1),2))

        print('unconstrain u1_0:',u1_0)
        if u1_0 > 0.5:
            u1_0 = 0.5
        if u1_0 < -0.5:
            u1_0 = -0.5
        print('u1_0: ',u1_0)
        # u1_0 = u1_0 *100
        # u2_0 = -(4*x1_0 + 5*x2_0 + x1_0*x3_0 - 15)/(pow(x1_0,2) + 25)

        # lam1 = 1, lam2 = 1
        # u2_0 = (10*x1_0 - x2_0 - 20*x1_0*x3_0 + 30)/(pow(20*x1_0, 2) + 5)

        # lam1 = 1.5 lam2 = 1
        # u2_0 = (10 * x1_0 - 3 * x2_0 - 40 * x1_0 * x3_0 + 90) / (40 * pow(x1_0 , 2) + 15)

        # lam1 = 2, lam2 = 1
        # u2_0 = -(x2_0 + 10*x1_0*x3_0 - 30)/(10*pow(x1_0, 2) + 5)

        # lam1 = 5, lam2 = 0.5
        # u2_0 = -(8*x1_0 + x2_0 + 2*x1_0*x3_0 - 30)/(2*pow(x1_0,2) + 5)

        # lam1 = 0.5, lam2 = 5
        # u2_0 = (190*x1_0 - x2_0 - 200*x1_0*x3_0 + 30)/(200*pow(x1_0,2) + 5)

        # lam1 = 0.1, lam2 = 10
        u2_0 = (1990*x1_0 - x2_0 - 2000*x1_0*x3_0 + 30)/(2000*pow(x1_0,2) + 5)
        print('unconstrain u2_0:', u2_0)
        print('J2__' + str(step) + ': ', x3_0 + x1_0*u2_0 - 1)
        if u2_0 > 0.01:
            u2_0 = 0.01
        if u2_0 < -0.01:
            u2_0 = -0.01
        print('u2_0: ', u2_0)
        # u2_0 = u2_0 *100
        a0 = np.array([u1_0, u2_0])
        s0, reward0, done, _ = env.step(a0)
        J1.append(x1_0 - 3)
        J2.append(x3_0 + x1_0*u2_0 - 1)

        env.render()
        print('J1__'+str(step)+': ', J1[step])
        print('J2__'+str(step)+': ', J2[step])
        print("---------------------------------")
        print("  ")

        time.sleep(0.05)

    for step in range(0,19):
        J1_sum += abs(J1[step])
        J2_sum += abs(J2[step])
    print('J1_sum: ', J1_sum)
    print('J2_sum: ', J2_sum)
    print('exit')


